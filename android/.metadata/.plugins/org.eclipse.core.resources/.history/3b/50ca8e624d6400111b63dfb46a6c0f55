package com.sowicm.little;

import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.SurfaceHolder.Callback;

public class monitor extends SurfaceView implements Callback, Runnable
{
    private Thread        thr;
    private SurfaceHolder sfh;
    private Canvas        canvas;
    private Paint         paint;
    private boolean       bThrRun;
    private URL           url;
    private String        lastModified;
    private Bitmap        bitmap;

    public monitor(Context context, AttributeSet attrs)
    {
        super(context, attrs);
        sfh = getHolder();
        sfh.addCallback(this);
        paint = new Paint();
        paint.setAntiAlias(true);
        try
        {
            url = new URL("http://my.zi-jin.com/little/st.png");
        }
        catch (MalformedURLException e)
        {
        }
    }
    
    public void surfaceCreated(SurfaceHolder holder)
    {
        thr = new Thread(this);
        bThrRun = true;
        thr.start();
    }
    
    public void surfaceChanged(SurfaceHolder arg0, int arg1, int arg2, int arg3)
    {
    }

    public void surfaceDestroyed(SurfaceHolder arg0)
    {
        bThrRun = false;
    }
    
    public void run()
    {
        while (bThrRun)
        {
            render();
            try
            {
                Thread.sleep(200);
            }
            catch (Exception e)
            {
            }
        }
    }
    
    public void render()
    {
        try
        {
            HttpURLConnection conn = (HttpURLConnection)url.openConnection();
            if (!lastModified.isEmpty())
                conn.addRequestProperty("If-Modified-Since:", lastModified);
            conn.setDoInput(true);
            conn.connect();
            InputStream in = conn.getInputStream();
            if (conn.getResponseCode() != 200)
            {
                in.close();
                return;
            }
            
            //bitmap = BitmapFactory.decodeStream(in);
            in.close();

            canvas = sfh.lockCanvas();
            //canvas.drawBitmap(bitmap, 0, 0, paint);
            canvas.drawColor(Color.WHITE);
            canvas.drawCircle(300, SmallRockerCircleY, 
                    SmallRockerCircleR, paint);
        }
        catch (Exception e)
        {
        }
        finally
        {
            try
            {
                if (canvas != null)
                    sfh.unlockCanvasAndPost(canvas);
            }
            catch (Exception e)
            {
            }
        }
    }
}
